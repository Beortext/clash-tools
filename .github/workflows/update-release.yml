name: Update release
on:
  workflow_dispatch:
  schedule:
    - cron: "0 19 * * *"
  push:
    branches:
      - main
    paths-ignore:
      - "**/README.md"

env:
  download_url: https://github.com/MetaCubeX/Clash.Meta/releases/download
  download_version: ''

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3

      - uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: latest
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true
          repo: DustinWin/clash-tools

      - name: Download and unzip `upx`
        run: |
          mkdir -p ./tmp
          upx_version=$(curl -sSL https://api.github.com/repos/upx/upx/releases | grep tag_name | head -n 1 | sed 's/.*v/v/g' | sed 's/",$//')
          upx_version_nov=$(curl -sSL https://api.github.com/repos/upx/upx/releases | grep tag_name | head -n 1 | sed 's/.*v//g' | sed 's/",$//')
          echo "upx_version=${upx_version}" >> ${GITHUB_ENV}
          echo "upx_version_nov=${upx_version_nov}" >> ${GITHUB_ENV}
          wget -P ./tmp "https://github.com/upx/upx/releases/download/${upx_version}/upx-${upx_version_nov}-amd64_linux.tar.xz"
          tar -xf "./tmp/upx-${upx_version_nov}-amd64_linux.tar.xz" -C ./tmp
          rm -f ./tmp/*.tar.xz

      - name: Download and compress `Clash.Meta core`
        run: |
          download_version=$(curl -sSL https://api.github.com/repos/MetaCubeX/Clash.Meta/releases/tags/Prerelease-Alpha | grep linux-arm64 | head -n 1 | sed 's_.gz.*__;s_.*arm64-__')
          echo "download_version=${download_version}" >> ${GITHUB_ENV}
          archs=(amd64-compatible armv5 armv6 armv7 arm64 mips-softfloat mipsle-hardfloat mipsle-softfloat)
          new_name=(amd64 armv5 armv6 armv7 armv8 mips-softfloat mipsle-hardfloat mipsle-softfloat)
          for((i=0;i<8;i++));do
            wget "${download_url}/Prerelease-Alpha/Clash.Meta-linux-${archs[i]}-${download_version}.gz" -O - | gunzip -c > ./tmp/clash.meta-linux-${new_name[i]}
            chmod +x ./tmp/clash.meta-linux-${new_name[i]}
            if [ "${archs[i]}" != "armv5" ];then
              if [[ ${archs[i]} = mips* ]];then
                ./tmp/upx-${upx_version_nov}-amd64_linux/upx --best ./tmp/clash.meta-linux-${new_name[i]}
              else
                ./tmp/upx-${upx_version_nov}-amd64_linux/upx --best ./tmp/clash.meta-linux-${new_name[i]}
              fi
            fi
          done
          wget -P ./tmp "${download_url}/Prerelease-Alpha/clash.meta-windows-amd64-${download_version}.zip"
          unzip "./tmp/clash.meta-windows-amd64-${download_version}.zip" -d ./tmp
          rm -f ./tmp/*.zip
          rm -rf ./tmp/upx*

      - name: Move files
        run: |
          mkdir -p ./publish
          cp ./tmp/* ./publish
          rm -rf ./tmp
          cd ./publish || exit 1

      - name: Release and upload assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: latest
          tag: latest
          file_glob: true
          file: ./publish/*

      - name: Set variables
        run: |
          echo "RELEASE_NAME=Released on $(date +%Y%m%d%H%M)" >> ${GITHUB_ENV}

      - name: Git push assets to "release" branch
        run: |
          cd ./publish || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add .
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      - name: Purge jsdelivr CDN
        run: |
          cd ./publish || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done
